#!/usr/bin/env python

# AUTHOR: Kunal Jha - Anna Mikhailova

# --------------------------------------------------------------------------------------------------------------------------------------------------
# import of relevant python modules and libraries
import rospy
import roslib
import tf
import re
import numpy as np
import math
from geometry_msgs.msg import Pose
from geometry_msgs.msg import Twist, PointStamped # message type for cmd_vel
from wolfpack.msg import CoordArray

roslib.load_manifest("wolfpack")

# topic constants
TGT_TOPIC = "/target"
DEFAULT_CMD_VEL_TOPIC = "/cmd_vel"
DEFAULT_ODOM_TOPIC = "/odom"
DEFAULT_BASE_LINK = "/base_link"
DEFAULT_PATROL_NAME = "/patrol"

# constants
FREQUENCY = 10 #Hz.
TGT_RANGE = 10 # range within which patrollers actually register target's position and commence flocking behaviour
RADIUS = 5 # radius for surrounding behaviour
ANGULAR_VELOCITY = math.pi/2  # rads/sec
LINEAR_VELOCITY = 0.2 # m/s
VELOCITY_SCALE = 1

# parameters
NUM_BOTS = rospy.get_param("num_bots", 3)

# --------------------------------------------------------------------------------------------------------------------------------------------------
# SOME HELPER METHODS
def euclid_dist(x1, y1, x2, y2):
    return ((x1-x2)**2 + (y1-y2)**2)**0.5

# helper functions to find the angle between current orientation and main coordinate
def unit_vector(vector):
    return vector / np.linalg.norm(vector)

def angle_between(v1, v2):
    v1_u = unit_vector(v1)
    v2_u = unit_vector(v2)
    return np.arccos(np.clip(np.dot(v1_u, v2_u), -1.0, 1.0))

# --------------------------------------------------------------------------------------------------------------------------------------------------
class Patroller:
    def __init__(self, robot_name):
        self.robot_name = robot_name
        self.rate = rospy.Rate(FREQUENCY)

        self.patrol_path = []
        self.robot_loc = None

        # initializing _cmd_vel_pub and patrol publisher
        self._cmd_vel_pub = rospy.Publisher("/" + self.robot_name + DEFAULT_CMD_VEL_TOPIC, Twist, queue_size=1)
        self.patrol_sub = rospy.Subscriber("/" + self.robot_name + DEFAULT_PATROL_NAME, CoordArray, self.patrol_cb)
        self.listener = tf.TransformListener()


    def patrol_cb(self, msg):
        self.patrol_path = []
        path = []
        self.rate.sleep()
        for coords in msg.coords:  # we have FloatLists here
            target = coords.elements
            path.append(target)
        self.patrol_path = path  # doing this incase the patrol function is called before callback finishes

    def get_transformed_point(self, waypoint):
        waypoint_stamped = PointStamped()
        waypoint_stamped.header.frame_id = 'world'
        waypoint_stamped.point.x = waypoint[0]
        waypoint_stamped.point.y = waypoint[1]
        return self.listener.transformPoint(self.robot_name + DEFAULT_ODOM_TOPIC, waypoint_stamped)

    def patrol(self):
        if len(self.patrol_path) > 0:  # non empty patrol path
            for target in self.patrol_path:
                self.robot_loc = (0, 0)  # making calculations from robot's perspective

                coords = self.get_transformed_point(target)
                coords = [coords.point.x, coords.point.y]


                vx, vy = coords[0] - self.robot_loc[0], coords[1] - self.robot_loc[1]
                dist = euclid_dist(coords[0], coords[1], 0, 0)
                # dist = euclid_dist(coords[0], coords[1], self.robot_loc[0], self.robot_loc[1])

                # normalize velocity
                if dist != 0:
                    vx /= dist
                    vy /= dist
                # scale velocity
                vx *= VELOCITY_SCALE
                vy *= VELOCITY_SCALE

                angle = math.atan2(vy, vx)

                if angle * -1 >= 0:
                    clockwise = True
                else:
                    clockwise = False

                self.rotate_in_place(angle, clockwise)  # move
                self.move_forward(dist)  # move
                self.rotate_in_place(angle, not clockwise) # rotating back to original face
                rospy.sleep(10)
                self.rate.sleep()


# --------------------------------------------------------------------------------------------------------------------------------------------------
# MOVEMENT METHODS -- modelled on SimpleMotion
# --------------------------------------------------------------------------------------------------------------------------------------------------
    # Purpose: move forward the robot for a given distance
    # Parameters: self, distance
    def move_forward(self, distance):
        # Rate at which to operate the while loop.
        rate = rospy.Rate(FREQUENCY)

        # Setting velocities.
        twist_msg = Twist()
        twist_msg.linear.x = LINEAR_VELOCITY
        start_time = rospy.get_rostime()
        duration = rospy.Duration(distance/twist_msg.linear.x)

        # Loop.
        while not rospy.is_shutdown():
            # Check if traveled of given distance based on time.
            if rospy.get_rostime() - start_time >= duration:
                break

            # Publish message.
            self._cmd_vel_pub.publish(twist_msg)

            # Sleep to keep the set publishing frequency.
            rate.sleep()

        # Traveled the required distance, stop.
        self.stop()


    # Purpose: rotate in place counterclockwise (unless otherwise specified), based on fixed velocity
    # Parameters: rotation angle
    def rotate_in_place(self, rotation_angle, clockwise):
        twist_msg = Twist()
        rotation_angle = abs(rotation_angle)
        twist_msg.angular.z = ANGULAR_VELOCITY
        duration = rotation_angle / twist_msg.angular.z
        if clockwise:
            twist_msg.angular.z = -twist_msg.angular.z

        start_time = rospy.get_rostime()
        rate = rospy.Rate(FREQUENCY)

        while not rospy.is_shutdown():
            if rospy.get_rostime() - start_time >= rospy.Duration(duration):  # Check if done
                break

            self._cmd_vel_pub.publish(twist_msg)  # Publish message.
            rate.sleep()  # Sleep to keep the set frequency.

        self.stop()  # Rotated the required angle, stop.


    # Purpose: stops bot movement
    # Parameters: self
    def stop(self):
        twist_msg = Twist()
        self._cmd_vel_pub.publish(twist_msg)


# --------------------------------------------------------------------------------------------------------------------------------------------------
# MAIN METHOD
# --------------------------------------------------------------------------------------------------------------------------------------------------
def main():
    robot_name = rospy.get_param("robot_name")  # get relative param for name
    print(robot_name)
    patroller = Patroller(robot_name)
    print("initialized patroller")

    # try:
    rate = rospy.Rate(FREQUENCY)
    while not rospy.is_shutdown():
        patroller.patrol()
        rate.sleep()


if __name__ == "__main__":
    # 1st. initialization of node.
    rospy.init_node("patroller")
    # Sleep for a few seconds to wait for the registration.
    print("sleeping")
    rospy.sleep(7)
    main()
