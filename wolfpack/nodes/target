#!/usr/bin/env python

# CLASS: Multi-Robot Systems, 22F, Final Project

# PURPOSE: a node for the target robot, which shares its location with the patroller robots
# once patrollers are in range of the target

# --------------------------------------------------------------------------------------------------------------------------------------------------
# import of relevant python modules and libraries
import rospy
import roslib
import tf
import re
from geometry_msgs.msg import Pose
from geometry_msgs.msg import Twist, PointStamped # message type for cmd_vel
import random
import math

# topic constants
TGT_TOPIC = "/target"
DEFAULT_CMD_VEL_TOPIC = "/cmd_vel"
DEFAULT_BASE_LINK = "/base_link"

# constants
# constants
FREQUENCY = 10 #Hz.
TGT_RANGE = 2 # range within which patrollers actually register target's position and commence flocking behaviour
RADIUS = 5 # radius for surrounding behaviour
ANGULAR_VELOCITY = math.pi/4  # rads/sec
LINEAR_VELOCITY = 0.2 # m/s

def euclid_dist(x1, y1, x2, y2):
    return ((x1-x2)**2 + (y1-y2)**2)**0.5


# --------------------------------------------------------------------------------------------------------------------------------------------------
class Target:
    def __init__(self, robot_name):
        self.bot_name = robot_name
        # setting up location publisher
        self._target_pub = rospy.Publisher(TGT_TOPIC, Pose, queue_size=1)

        # setting up tf listener to get the position of the robot relative to the world frame
        self.listener = tf.TransformListener()

        # name of the target (for location purposes)
        # self.bot_name = "robot_" + str(int(re.search(r'\d+', rospy.get_namespace()).group()))

        self._cmd_vel_pub = rospy.Publisher("/" + self.bot_name + DEFAULT_CMD_VEL_TOPIC, Twist, queue_size=1)

    def get_transformed_point(self, waypoint):
        waypoint_stamped = PointStamped()
        waypoint_stamped.header.frame_id = 'world'
        waypoint_stamped.point.x = waypoint[0]
        waypoint_stamped.point.y = waypoint[1]
        return self.listener.transformPoint(self.bot_name + DEFAULT_BASE_LINK, waypoint_stamped)

    # Method to retrive and return the current position of the target with respect to the world frame
    def retrieve_pose(self):
        target_pose = Pose() # initialize target position

        self.listener.waitForTransform("world", self.bot_name + "/base_link", rospy.Time(0), rospy.Duration(4.0))

        # get the transform and rotation matrices from tf listener
        (trans, rot) = self.listener.lookupTransform("world", self.bot_name + "/base_link",  rospy.Time(0))

        # populate the target position
        target_pose.position.x, target_pose.position.y = trans[0], trans[1]
        return target_pose


    def random_walk(self):
        # self.listener.waitForTransform("world", self.bot_name + "/base_link", rospy.Time(0), rospy.Duration(4.0))
        # # get the transform and rotation matrices from tf listener
        # (trans, rot) = self.listener.lookupTransform("world", self.bot_name + "/base_link",  rospy.Time(0))
        #
        waypoints = [[6, 8], [6, 7], [6, 6], [6, 5], [5, 5], [6, 4], [6, 5], [6, 6], [7, 6], [8, 7], [7, 7]]
        for p in waypoints:
            transformedRandPoint = self.get_transformed_point(p)  # convert to robot's perspective
            rand_x = transformedRandPoint.point.x
            rand_y = transformedRandPoint.point.y

            rand_distance = euclid_dist(rand_x, rand_y, 0, 0)  # params for moving
            rand_angle = math.atan2(rand_y, rand_x)

            self.rotate_in_place(rand_angle)  # move
            self.move_forward(rand_distance)

            self.stop()



# --------------------------------------------------------------------------------------------------------------------------------------------------
# MOVEMENT METHODS -- modelled on SimpleMotion
# --------------------------------------------------------------------------------------------------------------------------------------------------
    # Purpose: move forward the robot for a given distance
    # Parameters: self, distance
    def move_forward(self, distance):
        # Rate at which to operate the while loop.
        rate = rospy.Rate(FREQUENCY)

        # Setting velocities.
        twist_msg = Twist()
        twist_msg.linear.x = LINEAR_VELOCITY
        start_time = rospy.get_rostime()
        duration = rospy.Duration(distance/twist_msg.linear.x)
        msg = Pose() # create a pose message that will store the position of the target

        # Loop.
        while not rospy.is_shutdown():
            # Check if traveled of given distance based on time.
            if rospy.get_rostime() - start_time >= duration:
                break

            # Publish message.
            self._cmd_vel_pub.publish(twist_msg)

            # Sleep to keep the set publishing frequency.
            rate.sleep()

        # Traveled the required distance, stop.
        self.stop()


    # Purpose: rotate in place counterclockwise (unless otherwise specified), based on fixed velocity
    # Parameters: rotation angle
    def rotate_in_place(self, rotation_angle):
        msg = Pose() # create a pose message that will store the position of the target
        twist_msg = Twist()
        twist_msg.angular.z = ANGULAR_VELOCITY
        if rotation_angle < 0:
            twist_msg.angular.z = -twist_msg.angular.z
        duration = rotation_angle / twist_msg.angular.z

        if duration < 0:
            duration = -duration

        start_time = rospy.get_rostime()
        rate = rospy.Rate(FREQUENCY)

        while not rospy.is_shutdown():
            if rospy.get_rostime() - start_time >= rospy.Duration(duration):  # Check if done
                break

            self._cmd_vel_pub.publish(twist_msg)  # Publish message.
            rate.sleep()  # Sleep to keep the set frequency.

        self.stop()  # Rotated the required angle, stop.


    # Purpose: stops bot movement
    # Parameters: self
    def stop(self):
        twist_msg = Twist()
        self._cmd_vel_pub.publish(twist_msg)


def main():
    # 1st. initialization of node.
    rospy.init_node("target")
    robot_name = rospy.get_param("robot_name")  # get relative param for name


    # Sleep for a few seconds to wait for the registration.
    rospy.sleep(2)

    # Initialization of the class for the simple motion.
    target = Target(robot_name)

    rospy.sleep(4)
    rate = rospy.Rate(FREQUENCY)



    try:
        while not rospy.is_shutdown(): #-- implement while loop later on when we don't have a stationary target
            # target.random_walk()  # uncomment for movement
            rospy.sleep(2)


    except rospy.ROSInterruptException:
        rospy.logerr("ROS node interrupted.")

if __name__ == "__main__":
    """Run the main function."""
    main()
