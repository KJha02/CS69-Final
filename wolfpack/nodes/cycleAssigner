#!/usr/bin/env python
# finds the patrolling cycle after creating an MST around empty points in the graph

import roslib
roslib.load_manifest('wolfpack')
import random
from random import randint
import rospy
from wolfpack.msg import CoordArray, FloatList, calcWays
import networkx as nx
from networkx.algorithms.tree.mst import minimum_spanning_tree

FREQUENCY = 10
LOWER_X = 0
UPPER_X = 12
LOWER_Y = 0
UPPER_Y = 12

OBST_TOPIC = "/obstacle_topic"

class Assigner:
    def __init__(self, numRobots):
        # make a publisher of obstacles that all of the robots will see
        
        self.obstacles_pub = rospy.Publisher(OBST_TOPIC, CoordArray, queue_size=1)
        self.wall_grid = [[0 for _ in range(UPPER_Y)] for __ in range(UPPER_X)] # create grid of walls

        # fill in wall locations
        self.wall_locations = []
        # comment out the next line to have an obstacle-less world
        self.wall_locations = [[7, 8], [8, 9], [9,9], [10,9], [10,8], [10,7], [10, 6],
                        [4, 7], [4, 8], [4, 9], [4, 10],
                        [1, 3], [2, 3], [2, 4], [3, 4], [4, 1], [4, 2],
                        [7, 3], [8, 3], [9, 3], [10, 2], [10, 3], [10, 4], [9, 4]]
        for locs in self.wall_locations:  # mark all walls as occupied on the grid
            self.wall_grid[locs[0]][locs[1]] = 1


        self.numRobots = numRobots
        self.rate = rospy.Rate(FREQUENCY)

        self.assigned_path = {}
        self.patrol_publishers = {}


        self.full_cycle = self.makeCycle()  # generate the full cycle

        for i in range(self.numRobots):  # assigning default paths
            self.assigned_path[i] = self.full_cycle
            self.patrol_publishers[i] = rospy.Publisher('/robot_' + str(i) + '/patrol', CoordArray, queue_size=1)

    def publish_obstacles(self):
        # publishes obstacle locations to global topic
        coordMsgs = []
        for obst in self.wall_locations:
            msg = FloatList()
            msg.elements = obst
            msg.robot_id = -1
            msg.dist = -1.0
            coordMsgs.append(msg)
        coordArrMsg = CoordArray()
        coordArrMsg.coords = coordMsgs
        self.obstacles_pub.publish(coordArrMsg)

    def makeCycle(self):
        # # restricting robot movement
        # building graph
        G = nx.Graph()
        for x in range(LOWER_X, UPPER_X):  # hard coded boundry size
            for y in range(LOWER_Y, UPPER_Y):
                up = y < UPPER_Y - 1
                down = y > LOWER_Y + 1
                right = x < UPPER_X - 1
                left = x > LOWER_X + 1

                if self.wall_grid[x][y] == 0:  # base one has to be in bounds
                    # adding neighbors if in bounds and not an obstacle
                    if (up):
                        try:
                            if (self.wall_grid[x][y+1] == 0):
                                G.add_edge((x,y), (x, y+1), weight=1)
                        except:
                            print("failed going up")
                            print((x, y))
                    if (down):
                        try:
                            if (self.wall_grid[x][y-1] == 0):
                                G.add_edge((x,y), (x, y-1), weight=1)
                        except:
                            print("failed going down")
                            print((x, y))
                    if (left):
                        try:
                            if (self.wall_grid[x-1][y] == 0):
                                G.add_edge((x,y), (x-1, y), weight=1)
                        except:
                            print("failed going left")
                            print((x, y))
                    if (right):
                        try:
                            if (self.wall_grid[x+1][y] == 0):
                                G.add_edge((x,y), (x+1, y), weight=1)
                        except:
                            print("failed going right")
                            print((x, y))

        mst = minimum_spanning_tree(G)  # get mst from graph using kruskal's algorithm by default

        def smallToBig(x, y):
            return (x // 2, y // 2)

        firstBig = (LOWER_X, LOWER_Y)
        firstSmall = (firstBig[0] * 2, firstBig[1]*2)
        cycle = []
        curr = firstSmall
        while (curr not in cycle):
            cycle.append(curr)
            (x, y) = curr
            isRight = x % 2 == 1
            isBottom = y % 2 == 0
            this_big = smallToBig(x, y)
            if (not isRight and not isBottom):  # top left
                up_big = (this_big[0], this_big[1] + 1)
                if (up_big not in mst.adj[this_big]):  # go right, but only if tree isn't up
                    curr = (x+1, y)
                else:  # go up if tree goes up
                    curr = (x, y+1)
            elif (isRight and not isBottom):  # top right
                right_big = (this_big[0] + 1, this_big[1])
                if (right_big not in mst.adj[this_big]):  # go down only if right isn't coveren't
                    curr = (x, y-1)
                else:  # go right if tree goes right
                    curr = (x+1, y)
            elif (isRight and isBottom):  # bottom right
                down_big = (this_big[0], this_big[1] - 1)
                if (down_big not in mst.adj[this_big]):  #   # go left if tree doesn't go down
                    curr = (x-1, y)
                else:  # go down if tree goes down
                    curr = (x, y-1)
            else:  # bottom left
                left_big = (this_big[0] - 1, this_big[1])
                if (left_big not in mst.adj[this_big]):  # go up if tree doesn't go left
                    curr = (x, y+1)
                else:  # go left if tree goes left
                    curr = (x-1, y)

        def convertCoord(coordToConvert):
            (loc1, loc2) = coordToConvert

            return ((float(loc1) / 2)+ 0.25, (float(loc2) / 2) + 0.25)

        cycle = [convertCoord(x) for x in cycle]

        return cycle

    def publish_paths(self):
        # publishing default paths
        for i in range(self.numRobots):
            robotPath = CoordArray()
            robotPath.coords = []
            for coord in self.assigned_path[i]:  # getting the robot path as a msg
                coord_list = FloatList()
                coord_list.elements = coord
                coord_list.robot_id = -1  # dummy values
                coord_list.dist = float("inf")  # dummy values
                robotPath.coords.append(coord_list)
            self.patrol_publishers[i].publish(robotPath)  # publish the patrol message

def main():
    numRobots = rospy.get_param("/numRobots")

    assigner = Assigner(numRobots)
    rate = rospy.Rate(FREQUENCY)
    while not rospy.is_shutdown():
        assigner.publish_obstacles()
        assigner.publish_paths()
        rate.sleep()


if __name__ == "__main__":
    # 1st. initialization of node.
    print("initializing node")
    rospy.init_node("cycleAssigner")
    print("initialized node")
    # Sleep for a few seconds to wait for the registration.
    print("sleeping")
    rospy.sleep(7)
    print("finished sleeping")
    main()
